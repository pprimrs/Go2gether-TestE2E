# .github/workflows/robot-e2e.yml
name: E2E • Robot Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      env:
        description: "Target ENV (e.g., SIT, UAT, PROD)"
        required: false
        default: "SIT"
      tags:
        description: "Robot tags to include (e.g., smoke)"
        required: false
        default: ""

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # ---- App ENVs (ตั้งเป็น repo/organization secrets) ----
      ENV: ${{ github.event.inputs.env || 'SIT' }}
      BASE_URL: ${{ secrets.BASE_URL }}             # ex: https://api.example.com
      API_KEY: ${{ secrets.API_KEY }}
      API_SECRET: ${{ secrets.API_SECRET }}
      RESOURCE_OWNER_ID: ${{ secrets.RESOURCE_OWNER_ID }}
      X_MSCUSTOM_NAME: ${{ secrets.X_MSCUSTOM_NAME }}
      CONTENT_TYPE: ${{ secrets.CONTENT_TYPE || 'application/json' }}
      # --------------------------------------------------------
      PIP_CACHE_DIR: ~/.cache/pip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # (ทางเลือก) สร้างไฟล์ .env ถ้า environment.py ของโปรเจกต์อ่านค่าจาก .env
      - name: Generate .env for tests
        run: |
          {
            echo "ENV=${{ env.ENV }}";
            echo "BASE_URL=${{ env.BASE_URL }}";
            echo "API_KEY=${{ env.API_KEY }}";
            echo "API_SECRET=${{ env.API_SECRET }}";
            echo "RESOURCE_OWNER_ID=${{ env.RESOURCE_OWNER_ID }}";
            echo "X_MSCUSTOM_NAME=${{ env.X_MSCUSTOM_NAME }}";
            echo "CONTENT_TYPE=${{ env.CONTENT_TYPE }}";
          } > .env

      - name: Run Robot tests
        working-directory: .
        run: |
          # สร้างโฟลเดอร์รายงาน
          mkdir -p reports

          # รวม tag จาก dispatch ถ้ามี
          TAGS_INPUT="${{ github.event.inputs.tags }}"
          TAG_OPT=""
          if [ -n "$TAGS_INPUT" ]; then
            TAG_OPT="--include ${TAGS_INPUT}"
          fi

          # เพิ่ม E2E/resources เข้า PYTHONPATH เผื่อใช้ environment.py / custom libs
          export PYTHONPATH="$PWD/E2E/resources:$PYTHONPATH"

          # รันทั้งชุดทดสอบในโฟลเดอร์ E2E/tests
          # ใช้ variablefile (environment.py) + ส่งค่าซ้ำด้วย -v เพื่อ override ได้
          robot \
            -d reports \
            -V E2E/resources/environment.py \
            -v ENV:${{ env.ENV }} \
            -v BASE_URL:${{ env.BASE_URL }} \
            -v API_KEY:${{ env.API_KEY }} \
            -v API_SECRET:${{ env.API_SECRET }} \
            -v RESOURCE_OWNER_ID:${{ env.RESOURCE_OWNER_ID }} \
            -v X_MSCUSTOM_NAME:${{ env.X_MSCUSTOM_NAME }} \
            -v CONTENT_TYPE:${{ env.CONTENT_TYPE }} \
            $TAG_OPT \
            E2E/tests

      - name: Upload Robot reports (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-reports-${{ github.run_number }}
          path: |
            reports/**
            log.html
            report.html
            output.xml

      - name: Job summary
        if: always()
        run: |
          echo "## ✅ Robot E2E Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ENV: \`${{ env.ENV }}\`" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ github.event.inputs.tags }}" ]; then
            echo "- Included tags: \`${{ github.event.inputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- Artifacts: **robot-reports-${{ github.run_number }}**" >> $GITHUB_STEP_SUMMARY
